#!/usr/bin/env node

const { spawn } = require('child_process');
const axios = require('axios');

const SERVER_URL = 'http://localhost:5000';
const MAX_STARTUP_TIME = 30000; // 30 seconds

console.log('\nüöÄ HETASINGLAR BACKEND STARTUP ASSISTANT');
console.log('‚ïê'.repeat(60));
console.log(`‚è∞ Started at: ${new Date().toISOString()}`);
console.log('‚ïê'.repeat(60));

// Function to check if server is already running
async function checkIfServerRunning() {
  try {
    const response = await axios.get(`${SERVER_URL}/api/health`, { timeout: 3000 });
    return true;
  } catch (error) {
    return false;
  }
}

// Function to wait for server to start
async function waitForServer() {
  const startTime = Date.now();
  
  while (Date.now() - startTime < MAX_STARTUP_TIME) {
    try {
      const response = await axios.get(`${SERVER_URL}/api/health`, { timeout: 2000 });
      if (response.data.status === 'OK') {
        return true;
      }
    } catch (error) {
      // Server not ready yet, continue waiting
    }
    
    // Wait 1 second before next check
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  return false;
}

async function main() {
  // Check if server is already running
  console.log('üîç Checking if server is already running...');
  
  if (await checkIfServerRunning()) {
    console.log('‚úÖ Server is already running!');
    console.log('‚îÅ'.repeat(40));
    
    try {
      const response = await axios.get(`${SERVER_URL}/api/health`);
      const data = response.data;
      
      console.log('üü¢ CURRENT SERVER STATUS:');
      console.log(`üìç URL: ${SERVER_URL}`);
      console.log(`üìä Status: ${data.status}`);
      console.log(`‚è±Ô∏è  Uptime: ${Math.floor(data.uptime / 3600)}h ${Math.floor((data.uptime % 3600) / 60)}m`);
      console.log(`üóÑÔ∏è  Database: ${data.services.database}`);
      console.log(`üîó WebSocket clients: ${data.services.websocket}`);
      console.log(`üè∑Ô∏è  Version: ${data.version}`);
      console.log('‚îÅ'.repeat(40));
      console.log('üí° Use "npm run monitor" to continuously monitor server health');
      
    } catch (error) {
      console.log('‚ö†Ô∏è  Server is running but health check failed');
    }
    
    console.log('');
    return;
  }
  
  // Start the server
  console.log('üöÄ Starting HetaSinglar Backend Server...');
  console.log('‚îÅ'.repeat(40));
  
  const serverProcess = spawn('node', ['server.js'], {
    stdio: 'inherit',
    cwd: __dirname
  });
  
  serverProcess.on('error', (error) => {
    console.error('üî¥ Failed to start server:', error.message);
    process.exit(1);
  });
  
  // Wait for server to be ready
  console.log('‚è≥ Waiting for server to start...');
  
  const serverReady = await waitForServer();
  
  if (serverReady) {
    console.log('\nüéâ SERVER STARTUP COMPLETE!');
    console.log('‚ïê'.repeat(50));
    
    try {
      const response = await axios.get(`${SERVER_URL}/api/health`);
      const data = response.data;
      
      console.log('üü¢ SERVER READY AND HEALTHY');
      console.log(`üìç Server URL: ${SERVER_URL}`);
      console.log(`üìä Status: ${data.status}`);
      console.log(`üóÑÔ∏è  Database: ${data.services.database}`);
      console.log(`üîó WebSocket: Active`);
      console.log(`üè∑Ô∏è  Version: ${data.version}`);
      console.log('‚ïê'.repeat(50));
      console.log('‚úÖ All systems operational - Backend ready for connections!');
      
    } catch (error) {
      console.log('‚ö†Ô∏è  Server started but health check details unavailable');
    }
    
  } else {
    console.log('\nüü° SERVER STARTUP TIMEOUT');
    console.log('‚îÅ'.repeat(40));
    console.log('‚ö†Ô∏è  Server is taking longer than expected to start');
    console.log('üí° Check the server logs for any issues');
    console.log('üîç You can manually check: ' + SERVER_URL + '/api/health');
  }
  
  console.log('\nüí° HELPFUL COMMANDS:');
  console.log('   ‚Ä¢ npm run monitor  - Monitor server health');
  console.log('   ‚Ä¢ npm start        - Start server normally');
  console.log('   ‚Ä¢ npm run dev      - Start with auto-restart');
  console.log('');
  
  // Keep process alive to maintain server
  process.on('SIGINT', () => {
    console.log('\nüõë Shutting down startup assistant...');
    serverProcess.kill('SIGTERM');
    process.exit(0);
  });
}

main().catch(error => {
  console.error('\nüö® STARTUP ERROR');
  console.error('‚îÅ'.repeat(30));
  console.error(`‚ùå ${error.message}`);
  console.error('‚îÅ'.repeat(30));
  process.exit(1);
});
