# GitHub Actions workflow for automatic deployment to AWS EC2
name: Deploy to AWS EC2

# Trigger workflow on push to main branch
on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

# Define environment variables
env:
  PROJECT_PATH: ~/apps/api-Hetasinglar

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Create .env file with secrets
      - name: Create Environment File
        run: |
          echo "Creating .env file with production secrets..."
          cat > .env << EOF
          # Database Configuration
          DB_URL=${{ secrets.DB_URL }}
          
          # Authentication
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          # Server Configuration
          PORT=3000
          NODE_ENV=production
          
          # Add any additional environment variables here
          # CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          # CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          # CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          EOF

      # Step 3: Copy project files to EC2 server
      - name: Copy Files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          # EC2 connection details from GitHub Secrets
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          
          # Source and destination paths
          source: "."
          target: ${{ env.PROJECT_PATH }}
          
          # Overwrite existing files and remove extra files
          overwrite: true
          rm: true
          
          # Exclude unnecessary files during copy
          tar_tmp_path: "/tmp"
          exclude: |
            .git
            .github
            node_modules
            *.log
            .DS_Store

      # Step 4: Deploy application using Docker Compose
      - name: Deploy Application
        uses: appleboy/ssh-action@v0.1.11
        with:
          # EC2 connection details
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          
          # Deployment commands
          script: |
            echo "Starting deployment process..."
            
            # Navigate to project directory
            cd ${{ env.PROJECT_PATH }}
            
            # Show current directory for debugging
            echo "Current directory: $(pwd)"
            
            # Stop existing containers gracefully
            echo "Stopping existing containers..."
            docker compose down --remove-orphans || true
            
            # Remove old images to free up space (optional)
            echo "Cleaning up old Docker images..."
            docker image prune -af || true
            
            # Build new image with latest code
            echo "Building Docker image..."
            docker compose build --no-cache
            
            # Start containers in detached mode
            echo "Starting containers..."
            docker compose up -d
            
            # Show container status
            echo "Container status:"
            docker compose ps
            
            # Show recent logs for debugging
            echo "Recent logs:"
            docker compose logs --tail=20
            
            # Verify application is responding
            echo "Verifying deployment..."
            sleep 10
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "‚úÖ Deployment successful! Application is responding."
            else
              echo "‚ö†Ô∏è  Warning: Application health check failed. Check logs for issues."
              docker compose logs --tail=50
            fi

      # Step 5: Deployment notification (optional)
      - name: Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üöÄ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed. Check the logs above."
            exit 1
          fi
